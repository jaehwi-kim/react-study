안녕하세요, 시스템개발팀 인턴 김재휘입니다.
제가 발표할 내용은 인턴 과제로 클라우드 개발 직무 인턴 7명과 함께 협력하여 구축한 MLPE 모니터링 시스템입니다.

발표는 다음과 같은 순서로 진행 되겠습니다. 
첫번째 프로젝트의 개요를 시작으로 제가 담당이였던 웹 시스템의 역할, 왜 리액트를 사용했는지, 그리고 프로젝트 데모로 넘어가 마지막으로 추후 개선과 발전해 나가야 할 방향을 설명해드리겠습니다.

시작하기 앞서 프로젝트가 어떻게 구성이 되었고 Work Flow가 어떻게 되는지 간단히 소개하겠습니다.
먼저 DevOps Team은 개발자들이 버젼관리도구인 (GitLab)를 통해 협업을 하고, 사용자들에게는 Jenkins로 Software의 빌드와 배포 시스템을 구축합니다.
협업 시스템이 구축되면 Data 수집/저장 서버 Team이 Data Generator에서 REST API / Kafka Server를 통해 실시간 데이터를 수집/저장, 가공하여 Database에 전송을 합니다.
DataBase System / Pipeline 구축 Team은 이 받아온 데이터를 설계한 DB Schema를 토대로 PostgreSQL DB에 데이터를 한번 더 가공하여 데이터를 가져오기 쉬운 테이블로 정리를 합니다.
마지막으로 제가 있는 Web System Team은 직접적으로 사용자들과 상호작용하는 역할을 담당합니다. DB Team이 테이블로 정리를 해둔 데이터를 BackEnd 영역에서 통신을 하여 FrontEnd영역에서 받아온 데이터를 토대로 사용자들에게 시스템 UI를 제공합니다.

웹 시스템 팀에 대해 더 알아보겠습니다.
웹 시스템은 크게 2개의 영역 BackEnd와 FrontEnd로 나눠져 있으며 웹 시스템 팀 인턴 전부 두 영역에서 작업을 하였습니다.
Backend는 웹의 뒤에서 이루어지는 작업, 즉 REST API를 통하여 필요한 데이터를 DB에서 추출하고 데이터를 검색, 저장, 변경하는 작업을 FrontEnd 코드로 사용자에게 제공을 담당합니다.
이와 다르게 FrontEnd는 사용자들과 직접 상호작용하는 역할을 맡으며 BackEnd에서 받은 데이터를 사용자들에게 어떻게 보여줄지, 그리고 사용자들이 어떻게 웹이라는 시스템을 통해 의사소통을 할 수 있는지를 설계하는 역할을 담당합니다.

저희 웹 시스템팀은 FrontEnd영역을 개발할때 React라는 JS Library를 사용하였습니다.
짧고 빠르게 진행할 수 있는 바닐라 자바스크립트보다 React를 사용한 이유는 이 라이브러리만의 유일한 장점이 있기때문인데요, 이 장점은 크게 총 4개로 구성되어 있습니다.

첫번째로 리액트는 Single Page Application으로 개발합니다.  그저 JS로 이루어진 어플리케이션은 Multi Page Application으로 서버요청에 따라 다양한 페이지를 제공하는 부분에 불필요한 로딩이 생기고 사용자와 인터랙션이 자주 발생하는 모던 웹에 부적합합니다. 리액트는 오로지 View Layer만 담당하며 사용자에게 제공하는 페이지는 한 종류지만 로딩된 JS와 주소에 따라 다양한 화면을 보여줍니다. 이러한 프로세스로 더욱 자연스러운 사용자 경험이 생기며 필요한 리로스만 부분적으로 로딩하여 성능을 향상시키는 효과를 보여줍니다.

두번째로 리액트는 만드는 컴포넌트를 “재사용” 하게 해주는 기능이 있습니다. 리액트로 만들어지는 어플리케이션은 작은 컴포넌트로 시작해 여러 개의 컴포넌트로 합쳐진 큰 컴포넌트로 구성되어 있으며 이미 만드는 컴포넌트를 재사용하면서 코드가 더 정리되고 효율적으로 개발을 나아갈 수 있습니다.

세번째로 리액트는 Virtual DOM이라는걸 사용하는데, 보통은 DOM을 사용하여 웹에 보이는 모든 객체를 문서 구조로 표현하는 방식으로 되어있지만 리액트는 실제 DOM을 추상화한 JS 객체를 구성하여 실제 DOM과 비교하고 바뀐 부분만 적용하여 렌더링하는 방식을 사용합니다. (이 부분을 하나의 예시로 설명하자면 기존 표본의 밑그림 같은것을 그려서 원본과 비교를 하며 바뀐부분만 바꾼다) 이렇게 바뀌는 부분만 탐색을하여 렌더링을 줄여 성능을 향상시켜 줍니다.

마지막으로는 리액트는 Mobile App 으로도 확장할 수 있다는 점입니다. 리액트에서는 React Native라는 프레임워크를 제공하는데 이것은 기존의 React와 같은 방법의 아키텍쳐로 웹 어플리케이션 뿐만이 아니라 iOS/Android 앱까지 구현을 가능하게 해주는 장점을 가지고 있습니다.

이제 프로젝트 데모로 넘어가겠습니다. 이 웹 시스템은 총 3개의 페이지로 구성되어 있습니다. 제일 처음에 보이는 시스템 전체의 overview페이지, 태양광 모듈/스트링/게이트웨이를 모니터링 할 수 있는 Logical page, 그리고 더 자세하게 다양한 정보/데이터를 볼 수 있는 Graph페이지로 구성되어 있습니다.

처음 사용자가 시스템에 로그인을 하면 전체적인 시스템의 정보를 제공해줍니다. 구글맵을 사용하여 사용자 위치정보를 조회하여 위성사진을 보여주어 사용자가 사용하고 있는 태양광 모듈이 어떻게 보이는지 알려줍니다. 우측에는 사용하는 게이트웨이의 mac address, serial number, software version등의 정보를 보여줍니다. 페이지 하단에는 제일 최근에 시스템이 생성한 watt값, 그리고 각 기간안의 생성한 킬로와트시를 제공해 줍니다.

Logical Layout페이지는 사용자들이 자신이 사용하고 있는 시스템을 구성하고 있는 gateway/string/module의 아키텍쳐와 와트 생산량을 모니터링 할 수 있게 합니다. 사용자들은 왼쪽의 리스트박스에서 시스템의 파트를 확인 할 수 있고 그에따라 
저는 이 페이지에서 밑에 보이는 TimelapseGraph를 담당 하였는데, 사용자가 모니터링 하고싶은 부분과 보고싶은 기간을 설정을 하고, 하단의 플레이 버튼을 클릭하여 와트 생산량이 시간별로 어떻게 바뀌는지 한번에 보고, 위에 Logical Layout부분에서도 생산량이 많을때는 짙은 색깔, 적을때는 옅은 색깔로 표현하였습니다.
마지막으로 Graph페이지에서는 사용자들이 더 자세하고 다양한 데이터의 정보를 조회할 수 있습니다. 앞의 Logical 페이지와 마찬가지로 사용자들은 시스템의 module/string/gateway의 다양한 정보들 – total watt delta, 평균 온도와 전압등을 바 그래프로 확인할 수 있습니다. 여기서 주의해야할 점은 Logical Layout의 그래프는 하루, 한주, 한달을 그래프의 기간으로 잡았다면 그래프 페이지의 그래프는 단위가 하루로 구분이 되어있다는 점입니다.
이 웹시스템을 저를 포함 총 3명의 인턴들이 협업하여 구현을 하였고 어느 부분마다 3명 모두의 손이 안닿은곳이 없습니다. 그러나 제가 주요로 맡은 업무는 어떻게 사용자들과 더 효과적이게 소통을 할 수 있을까, 그리고 사용자의 불편함을 최소화 한다를 생각하며 구현을 하였습니다. 제가 구현한 Timelapse그래프에 animation을 적용한 bar를 포함하여 사용자들이 어느시간대에, 그리고 정확한 에너지 수치를 한번에 보이게 하였으며, 위의 Logical layout과도 소통하여 서로 상호작용이 가능하게 하였습니다. 또 전에 설명해드린 Single Page Application의 단점중 하나인 라우팅문제를 리액트 라우터를 통해 사용자들이 간편하게 뒤로, 앞으로, 새로고침, 그리고 원하는 페이지 북마킹을 가능 하게 구현하였습니다. 마지막으로 현재 보여지는 화면은 큰 사이즈의 모니터지만 작은 사이즈의 모티터를 사용하는 사용자들또한 포옹할수 있게 사이즈 변화에 반응할 수있게 구현하였습니다.

마지막으로 추후 개선과 발전해 나가야 할 방향을 설명해드리겠습니다.
최근 연구에 따르면 웹 환경에서 사용자들은 대기시간이 2초만 지나도 흥미를 잃기 시작하고 평균적으로 3초가 지나면 짜증을 내기 시작하고, 10초가 지나면 사용자 절반이 기다리기를 포기하거나 시스템을 떠난다고 합니다. 현재 구현되어 있는 시스템은 다소 적은 데이터를 받고 있음에도 불가하고 로딩시간이 3초이상 걸리는 현상이 발생됩니다. 앞으로 데이터가 많아지면 더더욱 성능이 저하 될것이고 이를 방지하기위해 필요시에만 렌더링을 하는 React.memo, 그리고 화면에 보이는 것을 위주로 렌더링을 하여 자원을 아끼는 react-virtualized라는 페키지를 사용하여 성능을 최적화 할 수있습니다. 
또 리액트에서 제공하는 리덕스 라이브러리를 사용하여 상태를 더 체계적으로 관리를 할 수 있습니다. 현재 프로젝트 규모가 크지않아 리덕스를 사용하지 않았지만 리덕스를 사용하면 트리형태로 되어있는 컴포넌트 구조를 벗어나 작업 효율을 향상시키고 이전에 구현하지 못했던 로그인같은 복잡한기능을 추가 할 수 있습니다. 
마지막으로 코드를 스플리팅하여 효율성을 더 높일 수 있습니다. 리액트는 빌드가 될때 웹팩으로 모든 컴포넌트 코드를 한 파일에 묶어 저장하는데, 그 과정에서 로딩과 트래픽이 증가합니다. 코드 스플리팅을 통해 파일을 분리함으로 필요한 자바스크립트 파일을 그때그때 불러와 사용하여 효율성을 한층 더 높일 수 있습니다.